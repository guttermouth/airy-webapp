'use strict';

var _clientUtils = require('./client-utils');

/**
 * Allows all components to have a clientId instead of a client pointer.
 * Allows an app to have multiple Clients, each with its own appId.
 * Provides a global utility that can be required by all modules for accessing
 * the client.
 *
 * @class  layer.ClientRegistry
 * @private
 */

var registry = {};
var listeners = [];

/**
 * Register a new Client; will destroy any previous client with the same appId.
 *
 * @method register
 * @param  {layer.Client} client
 */
function register(client) {
  var appId = client.appId;
  if (registry[appId] && !registry[appId].isDestroyed) {
    registry[appId].destroy();
  }
  registry[appId] = client;

  (0, _clientUtils.defer)(function () {
    return listeners.forEach(function (listener) {
      return listener(client);
    });
  });
}

/**
 * Removes a Client.
 *
 * @method unregister
 * @param  {layer.Client} client
 */
function unregister(client) {
  if (registry[client.appId]) delete registry[client.appId];
}

/**
 * Get a Client by appId
 *
 * @method get
 * @param  {string} appId
 * @return {layer.Client}
 */
function get(appId) {
  return registry[appId] || null;
}

function getAll() {
  return Object.keys(registry).map(function (key) {
    return registry[key];
  });
}

/**
 * Register a listener to be called whenever a new client is registered.
 *
 * @method addListener
 * @param {Function} listener
 * @param {layer.Client} listener.client
 */
function addListener(listener) {
  listeners.push(listener);
}

/**
 * Remove a registered listener or all listeners.
 *
 * If called with no arguments or null arguments, removes all listeners.
 * @method removeListener
 * @param {Function}
 */
function removeListener(listener) {
  if (listener) {
    var index = listeners.indexOf(listener);
    if (index >= 0) listeners.splice(index, 1);
  } else {
    listeners.splice(0, listeners.length);
  }
}

module.exports = {
  get: get,
  getAll: getAll,
  register: register,
  unregister: unregister,
  addListener: addListener,
  removeListener: removeListener
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQtcmVnaXN0cnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFZQTs7QUFaQTs7Ozs7Ozs7OztBQVVBLElBQU0sV0FBVyxFQUFqQjtBQUNBLElBQU0sWUFBWSxFQUFsQjs7QUFFQTs7Ozs7O0FBTUEsU0FBUyxRQUFULENBQWtCLE1BQWxCLEVBQTBCO0FBQ3hCLE1BQU0sUUFBUSxPQUFPLEtBQXJCO0FBQ0EsTUFBSSxTQUFTLEtBQVQsS0FBbUIsQ0FBQyxTQUFTLEtBQVQsRUFBZ0IsV0FBeEMsRUFBcUQ7QUFDbkQsYUFBUyxLQUFULEVBQWdCLE9BQWhCO0FBQ0Q7QUFDRCxXQUFTLEtBQVQsSUFBa0IsTUFBbEI7O0FBRUEsMEJBQU07QUFBQSxXQUFNLFVBQVUsT0FBVixDQUFrQjtBQUFBLGFBQVksU0FBUyxNQUFULENBQVo7QUFBQSxLQUFsQixDQUFOO0FBQUEsR0FBTjtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTLFVBQVQsQ0FBb0IsTUFBcEIsRUFBNEI7QUFDMUIsTUFBSSxTQUFTLE9BQU8sS0FBaEIsQ0FBSixFQUE0QixPQUFPLFNBQVMsT0FBTyxLQUFoQixDQUFQO0FBQzdCOztBQUVEOzs7Ozs7O0FBT0EsU0FBUyxHQUFULENBQWEsS0FBYixFQUFvQjtBQUNsQixTQUFPLFNBQVMsS0FBVCxLQUFtQixJQUExQjtBQUNEOztBQUVELFNBQVMsTUFBVCxHQUFrQjtBQUNoQixTQUFPLE9BQU8sSUFBUCxDQUFZLFFBQVosRUFBc0IsR0FBdEIsQ0FBMEI7QUFBQSxXQUFPLFNBQVMsR0FBVCxDQUFQO0FBQUEsR0FBMUIsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7O0FBT0EsU0FBUyxXQUFULENBQXFCLFFBQXJCLEVBQStCO0FBQzdCLFlBQVUsSUFBVixDQUFlLFFBQWY7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFNBQVMsY0FBVCxDQUF3QixRQUF4QixFQUFrQztBQUNoQyxNQUFJLFFBQUosRUFBYztBQUNaLFFBQU0sUUFBUSxVQUFVLE9BQVYsQ0FBa0IsUUFBbEIsQ0FBZDtBQUNBLFFBQUksU0FBUyxDQUFiLEVBQWdCLFVBQVUsTUFBVixDQUFpQixLQUFqQixFQUF3QixDQUF4QjtBQUNqQixHQUhELE1BR087QUFDTCxjQUFVLE1BQVYsQ0FBaUIsQ0FBakIsRUFBb0IsVUFBVSxNQUE5QjtBQUNEO0FBQ0Y7O0FBR0QsT0FBTyxPQUFQLEdBQWlCO0FBQ2YsVUFEZTtBQUVmLGdCQUZlO0FBR2Ysb0JBSGU7QUFJZix3QkFKZTtBQUtmLDBCQUxlO0FBTWY7QUFOZSxDQUFqQiIsImZpbGUiOiJjbGllbnQtcmVnaXN0cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFsbG93cyBhbGwgY29tcG9uZW50cyB0byBoYXZlIGEgY2xpZW50SWQgaW5zdGVhZCBvZiBhIGNsaWVudCBwb2ludGVyLlxuICogQWxsb3dzIGFuIGFwcCB0byBoYXZlIG11bHRpcGxlIENsaWVudHMsIGVhY2ggd2l0aCBpdHMgb3duIGFwcElkLlxuICogUHJvdmlkZXMgYSBnbG9iYWwgdXRpbGl0eSB0aGF0IGNhbiBiZSByZXF1aXJlZCBieSBhbGwgbW9kdWxlcyBmb3IgYWNjZXNzaW5nXG4gKiB0aGUgY2xpZW50LlxuICpcbiAqIEBjbGFzcyAgbGF5ZXIuQ2xpZW50UmVnaXN0cnlcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3QgcmVnaXN0cnkgPSB7fTtcbmNvbnN0IGxpc3RlbmVycyA9IFtdO1xuaW1wb3J0IHsgZGVmZXIgfSBmcm9tICcuL2NsaWVudC11dGlscyc7XG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IENsaWVudDsgd2lsbCBkZXN0cm95IGFueSBwcmV2aW91cyBjbGllbnQgd2l0aCB0aGUgc2FtZSBhcHBJZC5cbiAqXG4gKiBAbWV0aG9kIHJlZ2lzdGVyXG4gKiBAcGFyYW0gIHtsYXllci5DbGllbnR9IGNsaWVudFxuICovXG5mdW5jdGlvbiByZWdpc3RlcihjbGllbnQpIHtcbiAgY29uc3QgYXBwSWQgPSBjbGllbnQuYXBwSWQ7XG4gIGlmIChyZWdpc3RyeVthcHBJZF0gJiYgIXJlZ2lzdHJ5W2FwcElkXS5pc0Rlc3Ryb3llZCkge1xuICAgIHJlZ2lzdHJ5W2FwcElkXS5kZXN0cm95KCk7XG4gIH1cbiAgcmVnaXN0cnlbYXBwSWRdID0gY2xpZW50O1xuXG4gIGRlZmVyKCgpID0+IGxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKGNsaWVudCkpKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGEgQ2xpZW50LlxuICpcbiAqIEBtZXRob2QgdW5yZWdpc3RlclxuICogQHBhcmFtICB7bGF5ZXIuQ2xpZW50fSBjbGllbnRcbiAqL1xuZnVuY3Rpb24gdW5yZWdpc3RlcihjbGllbnQpIHtcbiAgaWYgKHJlZ2lzdHJ5W2NsaWVudC5hcHBJZF0pIGRlbGV0ZSByZWdpc3RyeVtjbGllbnQuYXBwSWRdO1xufVxuXG4vKipcbiAqIEdldCBhIENsaWVudCBieSBhcHBJZFxuICpcbiAqIEBtZXRob2QgZ2V0XG4gKiBAcGFyYW0gIHtzdHJpbmd9IGFwcElkXG4gKiBAcmV0dXJuIHtsYXllci5DbGllbnR9XG4gKi9cbmZ1bmN0aW9uIGdldChhcHBJZCkge1xuICByZXR1cm4gcmVnaXN0cnlbYXBwSWRdIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHJlZ2lzdHJ5KS5tYXAoa2V5ID0+IHJlZ2lzdHJ5W2tleV0pO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW5ldmVyIGEgbmV3IGNsaWVudCBpcyByZWdpc3RlcmVkLlxuICpcbiAqIEBtZXRob2QgYWRkTGlzdGVuZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyXG4gKiBAcGFyYW0ge2xheWVyLkNsaWVudH0gbGlzdGVuZXIuY2xpZW50XG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYSByZWdpc3RlcmVkIGxpc3RlbmVyIG9yIGFsbCBsaXN0ZW5lcnMuXG4gKlxuICogSWYgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzIG9yIG51bGwgYXJndW1lbnRzLCByZW1vdmVzIGFsbCBsaXN0ZW5lcnMuXG4gKiBAbWV0aG9kIHJlbW92ZUxpc3RlbmVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcikge1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH0gZWxzZSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZSgwLCBsaXN0ZW5lcnMubGVuZ3RoKTtcbiAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXQsXG4gIGdldEFsbCxcbiAgcmVnaXN0ZXIsXG4gIHVucmVnaXN0ZXIsXG4gIGFkZExpc3RlbmVyLFxuICByZW1vdmVMaXN0ZW5lcixcbn07XG4iXX0=
