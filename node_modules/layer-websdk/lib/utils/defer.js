'use strict';

/**
 * Execute this function immediately after current processing is complete (setImmediate replacement).
 *
 * A depth of up to 10 is allowed.  That means that functions you schedule using defer
 * can in turn schedule further actions.  The original actions are depth = 0; the actions scheduled
 * by your actions are depth = 1.  These new actions may in turn schedule further actions, which happen at depth = 3.
 * But to avoid infinite loops, if depth reaches 10, it clears the queue and ignores them.
 *
 * @method defer
 * @param {Function} f
 */
var setImmediate = global.getNativeSupport && global.getNativeSupport('setImmediate');
if (setImmediate) {
  module.exports = setImmediate;
} else {
  (function () {

    // Process all callbacks in the setImmediateQueue
    var setImmediateProcessor = function setImmediateProcessor() {
      // Processing the queue is no longer scheduled; clear any scheduling info.
      setImmediateIsPending = false;
      clearTimeout(setImmediateId);
      setImmediateId = 0;

      // Our initial depth is depth 0
      setImmediateDepth = 0;
      setImmediateQueue.push(setImmediateDepth);

      // Process all functions and depths in the queue starting always with the item at index 0,
      // and removing them from the queue before processing them.
      while (setImmediateQueue.length) {
        var item = setImmediateQueue.shift();
        if (typeof item === 'function') {
          try {
            item();
          } catch (err) {
            console.error(err);
          }
        } else if (item >= setImmediateMaxDepth) {
          setImmediateQueue = [];
          console.error('Layer Error: setImmediate Max Queue Depth Exceded');
        }
      }
    };
    // Schedule the function to be called by adding it to the queue, and setting up scheduling if its needed.


    var setImmediateId = 0,
        setImmediateDepth = 0,


    // Have we scheduled the queue to be processed? If not, this is false
    setImmediateIsPending = false,


    // Queue of functions to call and depth integers
    setImmediateQueue = [];

    // If a setImmediate callback itself calls setImmediate which in turn calls setImmediate, at what point do we suspect we have an infinite loop?
    // A depth of 10 is currently considered OK, but this may need to be increased.
    var setImmediateMaxDepth = 10;module.exports = function defer(func) {
      if (typeof func !== 'function') throw new Error('Function expected in defer');

      setImmediateQueue.push(func);

      // If postMessage has not already been called, call it
      if (!setImmediateIsPending) {
        setImmediateIsPending = true;
        if (typeof document !== 'undefined') {
          window.postMessage({ type: 'layer-set-immediate' }, '*');
        } else {
          // React Native reportedly lacks a document, and throws errors on the second parameter
          window.postMessage({ type: 'layer-set-immediate' });
        }

        // Having seen scenarios where postMessage failed to trigger, set a backup using setTimeout that will be canceled
        // if postMessage is succesfully called.
        setImmediateId = setTimeout(setImmediateProcessor, 0);
      }
    };

    // For Unit Testing
    module.exports.flush = function () {
      return setImmediateProcessor();
    };
    module.exports.reset = function () {
      setImmediateQueue = [];
    };

    addEventListener('message', function (event) {
      if (event.data.type !== 'layer-set-immediate') return;
      setImmediateProcessor();
    });
  })();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7OztBQVdBLElBQU0sZUFBZSxPQUFPLGdCQUFQLElBQTJCLE9BQU8sZ0JBQVAsQ0FBd0IsY0FBeEIsQ0FBaEQ7QUFDQSxJQUFJLFlBQUosRUFBa0I7QUFDaEIsU0FBTyxPQUFQLEdBQWlCLFlBQWpCO0FBQ0QsQ0FGRCxNQUVPO0FBQUE7O0FBY0w7QUFkSyxRQWVJLHFCQWZKLEdBZUwsU0FBUyxxQkFBVCxHQUFpQztBQUMvQjtBQUNBLDhCQUF3QixLQUF4QjtBQUNBLG1CQUFhLGNBQWI7QUFDQSx1QkFBaUIsQ0FBakI7O0FBRUE7QUFDQSwwQkFBb0IsQ0FBcEI7QUFDQSx3QkFBa0IsSUFBbEIsQ0FBdUIsaUJBQXZCOztBQUVBO0FBQ0E7QUFDQSxhQUFPLGtCQUFrQixNQUF6QixFQUFpQztBQUMvQixZQUFNLE9BQU8sa0JBQWtCLEtBQWxCLEVBQWI7QUFDQSxZQUFJLE9BQU8sSUFBUCxLQUFnQixVQUFwQixFQUFnQztBQUM5QixjQUFJO0FBQ0Y7QUFDRCxXQUZELENBRUUsT0FBTyxHQUFQLEVBQVk7QUFDWixvQkFBUSxLQUFSLENBQWMsR0FBZDtBQUNEO0FBQ0YsU0FORCxNQU1PLElBQUksUUFBUSxvQkFBWixFQUFrQztBQUN2Qyw4QkFBb0IsRUFBcEI7QUFDQSxrQkFBUSxLQUFSLENBQWMsbURBQWQ7QUFDRDtBQUNGO0FBQ0YsS0F4Q0k7QUF5Q0w7OztBQXhDQSxRQUFJLGlCQUFpQixDQUFyQjtBQUFBLFFBQ0Usb0JBQW9CLENBRHRCOzs7QUFHRTtBQUNBLDRCQUF3QixLQUoxQjs7O0FBTUU7QUFDQSx3QkFBb0IsRUFQdEI7O0FBU0E7QUFDQTtBQUNBLFFBQU0sdUJBQXVCLEVBQTdCLENBOEJBLE9BQU8sT0FBUCxHQUFpQixTQUFTLEtBQVQsQ0FBZSxJQUFmLEVBQXFCO0FBQ3BDLFVBQUksT0FBTyxJQUFQLEtBQWdCLFVBQXBCLEVBQWdDLE1BQU0sSUFBSSxLQUFKLENBQVUsNEJBQVYsQ0FBTjs7QUFFaEMsd0JBQWtCLElBQWxCLENBQXVCLElBQXZCOztBQUVBO0FBQ0EsVUFBSSxDQUFDLHFCQUFMLEVBQTRCO0FBQzFCLGdDQUF3QixJQUF4QjtBQUNBLFlBQUksT0FBTyxRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ25DLGlCQUFPLFdBQVAsQ0FBbUIsRUFBRSxNQUFNLHFCQUFSLEVBQW5CLEVBQW9ELEdBQXBEO0FBQ0QsU0FGRCxNQUVPO0FBQ0w7QUFDQSxpQkFBTyxXQUFQLENBQW1CLEVBQUUsTUFBTSxxQkFBUixFQUFuQjtBQUNEOztBQUVEO0FBQ0E7QUFDQSx5QkFBaUIsV0FBVyxxQkFBWCxFQUFrQyxDQUFsQyxDQUFqQjtBQUNEO0FBQ0YsS0FuQkQ7O0FBcUJBO0FBQ0EsV0FBTyxPQUFQLENBQWUsS0FBZixHQUF1QjtBQUFBLGFBQU0sdUJBQU47QUFBQSxLQUF2QjtBQUNBLFdBQU8sT0FBUCxDQUFlLEtBQWYsR0FBdUIsWUFBTTtBQUFFLDBCQUFvQixFQUFwQjtBQUF5QixLQUF4RDs7QUFFQSxxQkFBaUIsU0FBakIsRUFBNEIsVUFBQyxLQUFELEVBQVc7QUFDckMsVUFBSSxNQUFNLElBQU4sQ0FBVyxJQUFYLEtBQW9CLHFCQUF4QixFQUErQztBQUMvQztBQUNELEtBSEQ7QUFuRUs7QUF1RU4iLCJmaWxlIjoiZGVmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBpbW1lZGlhdGVseSBhZnRlciBjdXJyZW50IHByb2Nlc3NpbmcgaXMgY29tcGxldGUgKHNldEltbWVkaWF0ZSByZXBsYWNlbWVudCkuXG4gKlxuICogQSBkZXB0aCBvZiB1cCB0byAxMCBpcyBhbGxvd2VkLiAgVGhhdCBtZWFucyB0aGF0IGZ1bmN0aW9ucyB5b3Ugc2NoZWR1bGUgdXNpbmcgZGVmZXJcbiAqIGNhbiBpbiB0dXJuIHNjaGVkdWxlIGZ1cnRoZXIgYWN0aW9ucy4gIFRoZSBvcmlnaW5hbCBhY3Rpb25zIGFyZSBkZXB0aCA9IDA7IHRoZSBhY3Rpb25zIHNjaGVkdWxlZFxuICogYnkgeW91ciBhY3Rpb25zIGFyZSBkZXB0aCA9IDEuICBUaGVzZSBuZXcgYWN0aW9ucyBtYXkgaW4gdHVybiBzY2hlZHVsZSBmdXJ0aGVyIGFjdGlvbnMsIHdoaWNoIGhhcHBlbiBhdCBkZXB0aCA9IDMuXG4gKiBCdXQgdG8gYXZvaWQgaW5maW5pdGUgbG9vcHMsIGlmIGRlcHRoIHJlYWNoZXMgMTAsIGl0IGNsZWFycyB0aGUgcXVldWUgYW5kIGlnbm9yZXMgdGhlbS5cbiAqXG4gKiBAbWV0aG9kIGRlZmVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKi9cbmNvbnN0IHNldEltbWVkaWF0ZSA9IGdsb2JhbC5nZXROYXRpdmVTdXBwb3J0ICYmIGdsb2JhbC5nZXROYXRpdmVTdXBwb3J0KCdzZXRJbW1lZGlhdGUnKTtcbmlmIChzZXRJbW1lZGlhdGUpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBzZXRJbW1lZGlhdGU7XG59IGVsc2Uge1xuICBsZXQgc2V0SW1tZWRpYXRlSWQgPSAwLFxuICAgIHNldEltbWVkaWF0ZURlcHRoID0gMCxcblxuICAgIC8vIEhhdmUgd2Ugc2NoZWR1bGVkIHRoZSBxdWV1ZSB0byBiZSBwcm9jZXNzZWQ/IElmIG5vdCwgdGhpcyBpcyBmYWxzZVxuICAgIHNldEltbWVkaWF0ZUlzUGVuZGluZyA9IGZhbHNlLFxuXG4gICAgLy8gUXVldWUgb2YgZnVuY3Rpb25zIHRvIGNhbGwgYW5kIGRlcHRoIGludGVnZXJzXG4gICAgc2V0SW1tZWRpYXRlUXVldWUgPSBbXTtcblxuICAvLyBJZiBhIHNldEltbWVkaWF0ZSBjYWxsYmFjayBpdHNlbGYgY2FsbHMgc2V0SW1tZWRpYXRlIHdoaWNoIGluIHR1cm4gY2FsbHMgc2V0SW1tZWRpYXRlLCBhdCB3aGF0IHBvaW50IGRvIHdlIHN1c3BlY3Qgd2UgaGF2ZSBhbiBpbmZpbml0ZSBsb29wP1xuICAvLyBBIGRlcHRoIG9mIDEwIGlzIGN1cnJlbnRseSBjb25zaWRlcmVkIE9LLCBidXQgdGhpcyBtYXkgbmVlZCB0byBiZSBpbmNyZWFzZWQuXG4gIGNvbnN0IHNldEltbWVkaWF0ZU1heERlcHRoID0gMTA7XG5cbiAgLy8gUHJvY2VzcyBhbGwgY2FsbGJhY2tzIGluIHRoZSBzZXRJbW1lZGlhdGVRdWV1ZVxuICBmdW5jdGlvbiBzZXRJbW1lZGlhdGVQcm9jZXNzb3IoKSB7XG4gICAgLy8gUHJvY2Vzc2luZyB0aGUgcXVldWUgaXMgbm8gbG9uZ2VyIHNjaGVkdWxlZDsgY2xlYXIgYW55IHNjaGVkdWxpbmcgaW5mby5cbiAgICBzZXRJbW1lZGlhdGVJc1BlbmRpbmcgPSBmYWxzZTtcbiAgICBjbGVhclRpbWVvdXQoc2V0SW1tZWRpYXRlSWQpO1xuICAgIHNldEltbWVkaWF0ZUlkID0gMDtcblxuICAgIC8vIE91ciBpbml0aWFsIGRlcHRoIGlzIGRlcHRoIDBcbiAgICBzZXRJbW1lZGlhdGVEZXB0aCA9IDA7XG4gICAgc2V0SW1tZWRpYXRlUXVldWUucHVzaChzZXRJbW1lZGlhdGVEZXB0aCk7XG5cbiAgICAvLyBQcm9jZXNzIGFsbCBmdW5jdGlvbnMgYW5kIGRlcHRocyBpbiB0aGUgcXVldWUgc3RhcnRpbmcgYWx3YXlzIHdpdGggdGhlIGl0ZW0gYXQgaW5kZXggMCxcbiAgICAvLyBhbmQgcmVtb3ZpbmcgdGhlbSBmcm9tIHRoZSBxdWV1ZSBiZWZvcmUgcHJvY2Vzc2luZyB0aGVtLlxuICAgIHdoaWxlIChzZXRJbW1lZGlhdGVRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBzZXRJbW1lZGlhdGVRdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaXRlbSgpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXRlbSA+PSBzZXRJbW1lZGlhdGVNYXhEZXB0aCkge1xuICAgICAgICBzZXRJbW1lZGlhdGVRdWV1ZSA9IFtdO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdMYXllciBFcnJvcjogc2V0SW1tZWRpYXRlIE1heCBRdWV1ZSBEZXB0aCBFeGNlZGVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFNjaGVkdWxlIHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYnkgYWRkaW5nIGl0IHRvIHRoZSBxdWV1ZSwgYW5kIHNldHRpbmcgdXAgc2NoZWR1bGluZyBpZiBpdHMgbmVlZGVkLlxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmVyKGZ1bmMpIHtcbiAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gZXhwZWN0ZWQgaW4gZGVmZXInKTtcblxuICAgIHNldEltbWVkaWF0ZVF1ZXVlLnB1c2goZnVuYyk7XG5cbiAgICAvLyBJZiBwb3N0TWVzc2FnZSBoYXMgbm90IGFscmVhZHkgYmVlbiBjYWxsZWQsIGNhbGwgaXRcbiAgICBpZiAoIXNldEltbWVkaWF0ZUlzUGVuZGluZykge1xuICAgICAgc2V0SW1tZWRpYXRlSXNQZW5kaW5nID0gdHJ1ZTtcbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSh7IHR5cGU6ICdsYXllci1zZXQtaW1tZWRpYXRlJyB9LCAnKicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVhY3QgTmF0aXZlIHJlcG9ydGVkbHkgbGFja3MgYSBkb2N1bWVudCwgYW5kIHRocm93cyBlcnJvcnMgb24gdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKHsgdHlwZTogJ2xheWVyLXNldC1pbW1lZGlhdGUnIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBIYXZpbmcgc2VlbiBzY2VuYXJpb3Mgd2hlcmUgcG9zdE1lc3NhZ2UgZmFpbGVkIHRvIHRyaWdnZXIsIHNldCBhIGJhY2t1cCB1c2luZyBzZXRUaW1lb3V0IHRoYXQgd2lsbCBiZSBjYW5jZWxlZFxuICAgICAgLy8gaWYgcG9zdE1lc3NhZ2UgaXMgc3VjY2VzZnVsbHkgY2FsbGVkLlxuICAgICAgc2V0SW1tZWRpYXRlSWQgPSBzZXRUaW1lb3V0KHNldEltbWVkaWF0ZVByb2Nlc3NvciwgMCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEZvciBVbml0IFRlc3RpbmdcbiAgbW9kdWxlLmV4cG9ydHMuZmx1c2ggPSAoKSA9PiBzZXRJbW1lZGlhdGVQcm9jZXNzb3IoKTtcbiAgbW9kdWxlLmV4cG9ydHMucmVzZXQgPSAoKSA9PiB7IHNldEltbWVkaWF0ZVF1ZXVlID0gW107IH07XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5kYXRhLnR5cGUgIT09ICdsYXllci1zZXQtaW1tZWRpYXRlJykgcmV0dXJuO1xuICAgIHNldEltbWVkaWF0ZVByb2Nlc3NvcigpO1xuICB9KTtcbn1cbiJdfQ==
