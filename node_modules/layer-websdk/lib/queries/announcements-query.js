'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Query class for running a Query on Announcements
 *
 *      var announcementQuery = client.createQuery({
 *        client: client,
 *        model: layer.Query.Announcement
 *      });
 *
 *
 * You can change the `paginationWindow` property at any time using:
 *
 *      query.update({
 *        paginationWindow: 200
 *      });
 *
 * You can release data held in memory by your queries when done with them:
 *
 *      query.destroy();
 *
 * @class  layer.AnnouncementsQuery
 * @extends layer.Query
 */
var Root = require('../root');
var Query = require('./query');
var MessagesQuery = require('./messages-query');

var AnnouncementsQuery = function (_MessagesQuery) {
  _inherits(AnnouncementsQuery, _MessagesQuery);

  function AnnouncementsQuery() {
    _classCallCheck(this, AnnouncementsQuery);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(AnnouncementsQuery).apply(this, arguments));
  }

  _createClass(AnnouncementsQuery, [{
    key: '_fixPredicate',
    value: function _fixPredicate(inValue) {
      return Query.prototype._fixPredicate.apply(this, [inValue]);
    }
  }, {
    key: '_fetchData',
    value: function _fetchData(pageSize) {
      var _this2 = this;

      // Retrieve data from db cache in parallel with loading data from server
      this.client.dbManager.loadAnnouncements(this._nextDBFromId, pageSize, function (messages) {
        if (messages.length) _this2._appendResults({ data: messages }, true);
      });

      var newRequest = 'announcements?page_size=' + pageSize + (this._nextServerFromId ? '&from_id=' + this._nextServerFromId : '');

      // Don't repeat still firing queries
      if (newRequest !== this._firingRequest) {
        this.isFiring = true;
        this._firingRequest = newRequest;
        this.client.xhr({
          telemetry: {
            name: 'announcement_query_time'
          },
          url: newRequest,
          method: 'GET',
          sync: false
        }, function (results) {
          return _this2._processRunResults(results, newRequest, pageSize);
        });
      }
    }
  }]);

  return AnnouncementsQuery;
}(MessagesQuery);

AnnouncementsQuery._supportedEvents = [].concat(MessagesQuery._supportedEvents);

AnnouncementsQuery.MaxPageSize = 100;

AnnouncementsQuery.prototype.model = Query.Announcement;

Root.initClass.apply(AnnouncementsQuery, [AnnouncementsQuery, 'AnnouncementsQuery']);

module.exports = AnnouncementsQuery;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL2Fubm91bmNlbWVudHMtcXVlcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBLElBQU0sT0FBTyxRQUFRLFNBQVIsQ0FBYjtBQUNBLElBQU0sUUFBUSxRQUFRLFNBQVIsQ0FBZDtBQUNBLElBQU0sZ0JBQWdCLFFBQVEsa0JBQVIsQ0FBdEI7O0lBRU0sa0I7Ozs7Ozs7Ozs7O2tDQUNVLE8sRUFBUztBQUNyQixhQUFPLE1BQU0sU0FBTixDQUFnQixhQUFoQixDQUE4QixLQUE5QixDQUFvQyxJQUFwQyxFQUEwQyxDQUFDLE9BQUQsQ0FBMUMsQ0FBUDtBQUNEOzs7K0JBRVUsUSxFQUFVO0FBQUE7O0FBQ25CO0FBQ0EsV0FBSyxNQUFMLENBQVksU0FBWixDQUFzQixpQkFBdEIsQ0FBd0MsS0FBSyxhQUE3QyxFQUE0RCxRQUE1RCxFQUFzRSxVQUFDLFFBQUQsRUFBYztBQUNsRixZQUFJLFNBQVMsTUFBYixFQUFxQixPQUFLLGNBQUwsQ0FBb0IsRUFBRSxNQUFNLFFBQVIsRUFBcEIsRUFBd0MsSUFBeEM7QUFDdEIsT0FGRDs7QUFJQSxVQUFNLGFBQWEsNkJBQTJCLFFBQTNCLElBQ2hCLEtBQUssaUJBQUwsR0FBeUIsY0FBYyxLQUFLLGlCQUE1QyxHQUFnRSxFQURoRCxDQUFuQjs7QUFHQTtBQUNBLFVBQUksZUFBZSxLQUFLLGNBQXhCLEVBQXdDO0FBQ3RDLGFBQUssUUFBTCxHQUFnQixJQUFoQjtBQUNBLGFBQUssY0FBTCxHQUFzQixVQUF0QjtBQUNBLGFBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0I7QUFDZCxxQkFBVztBQUNULGtCQUFNO0FBREcsV0FERztBQUlkLGVBQUssVUFKUztBQUtkLGtCQUFRLEtBTE07QUFNZCxnQkFBTTtBQU5RLFNBQWhCLEVBT0c7QUFBQSxpQkFBVyxPQUFLLGtCQUFMLENBQXdCLE9BQXhCLEVBQWlDLFVBQWpDLEVBQTZDLFFBQTdDLENBQVg7QUFBQSxTQVBIO0FBUUQ7QUFDRjs7OztFQTNCOEIsYTs7QUE4QmpDLG1CQUFtQixnQkFBbkIsR0FBc0MsR0FDcEMsTUFEb0MsQ0FDN0IsY0FBYyxnQkFEZSxDQUF0Qzs7QUFJQSxtQkFBbUIsV0FBbkIsR0FBaUMsR0FBakM7O0FBRUEsbUJBQW1CLFNBQW5CLENBQTZCLEtBQTdCLEdBQXFDLE1BQU0sWUFBM0M7O0FBRUEsS0FBSyxTQUFMLENBQWUsS0FBZixDQUFxQixrQkFBckIsRUFBeUMsQ0FBQyxrQkFBRCxFQUFxQixvQkFBckIsQ0FBekM7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLGtCQUFqQiIsImZpbGUiOiJhbm5vdW5jZW1lbnRzLXF1ZXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBRdWVyeSBjbGFzcyBmb3IgcnVubmluZyBhIFF1ZXJ5IG9uIEFubm91bmNlbWVudHNcbiAqXG4gKiAgICAgIHZhciBhbm5vdW5jZW1lbnRRdWVyeSA9IGNsaWVudC5jcmVhdGVRdWVyeSh7XG4gKiAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gKiAgICAgICAgbW9kZWw6IGxheWVyLlF1ZXJ5LkFubm91bmNlbWVudFxuICogICAgICB9KTtcbiAqXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgdGhlIGBwYWdpbmF0aW9uV2luZG93YCBwcm9wZXJ0eSBhdCBhbnkgdGltZSB1c2luZzpcbiAqXG4gKiAgICAgIHF1ZXJ5LnVwZGF0ZSh7XG4gKiAgICAgICAgcGFnaW5hdGlvbldpbmRvdzogMjAwXG4gKiAgICAgIH0pO1xuICpcbiAqIFlvdSBjYW4gcmVsZWFzZSBkYXRhIGhlbGQgaW4gbWVtb3J5IGJ5IHlvdXIgcXVlcmllcyB3aGVuIGRvbmUgd2l0aCB0aGVtOlxuICpcbiAqICAgICAgcXVlcnkuZGVzdHJveSgpO1xuICpcbiAqIEBjbGFzcyAgbGF5ZXIuQW5ub3VuY2VtZW50c1F1ZXJ5XG4gKiBAZXh0ZW5kcyBsYXllci5RdWVyeVxuICovXG5jb25zdCBSb290ID0gcmVxdWlyZSgnLi4vcm9vdCcpO1xuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5Jyk7XG5jb25zdCBNZXNzYWdlc1F1ZXJ5ID0gcmVxdWlyZSgnLi9tZXNzYWdlcy1xdWVyeScpO1xuXG5jbGFzcyBBbm5vdW5jZW1lbnRzUXVlcnkgZXh0ZW5kcyBNZXNzYWdlc1F1ZXJ5IHtcbiAgX2ZpeFByZWRpY2F0ZShpblZhbHVlKSB7XG4gICAgcmV0dXJuIFF1ZXJ5LnByb3RvdHlwZS5fZml4UHJlZGljYXRlLmFwcGx5KHRoaXMsIFtpblZhbHVlXSk7XG4gIH1cblxuICBfZmV0Y2hEYXRhKHBhZ2VTaXplKSB7XG4gICAgLy8gUmV0cmlldmUgZGF0YSBmcm9tIGRiIGNhY2hlIGluIHBhcmFsbGVsIHdpdGggbG9hZGluZyBkYXRhIGZyb20gc2VydmVyXG4gICAgdGhpcy5jbGllbnQuZGJNYW5hZ2VyLmxvYWRBbm5vdW5jZW1lbnRzKHRoaXMuX25leHREQkZyb21JZCwgcGFnZVNpemUsIChtZXNzYWdlcykgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCkgdGhpcy5fYXBwZW5kUmVzdWx0cyh7IGRhdGE6IG1lc3NhZ2VzIH0sIHRydWUpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgbmV3UmVxdWVzdCA9IGBhbm5vdW5jZW1lbnRzP3BhZ2Vfc2l6ZT0ke3BhZ2VTaXplfWAgK1xuICAgICAgKHRoaXMuX25leHRTZXJ2ZXJGcm9tSWQgPyAnJmZyb21faWQ9JyArIHRoaXMuX25leHRTZXJ2ZXJGcm9tSWQgOiAnJyk7XG5cbiAgICAvLyBEb24ndCByZXBlYXQgc3RpbGwgZmlyaW5nIHF1ZXJpZXNcbiAgICBpZiAobmV3UmVxdWVzdCAhPT0gdGhpcy5fZmlyaW5nUmVxdWVzdCkge1xuICAgICAgdGhpcy5pc0ZpcmluZyA9IHRydWU7XG4gICAgICB0aGlzLl9maXJpbmdSZXF1ZXN0ID0gbmV3UmVxdWVzdDtcbiAgICAgIHRoaXMuY2xpZW50Lnhocih7XG4gICAgICAgIHRlbGVtZXRyeToge1xuICAgICAgICAgIG5hbWU6ICdhbm5vdW5jZW1lbnRfcXVlcnlfdGltZScsXG4gICAgICAgIH0sXG4gICAgICAgIHVybDogbmV3UmVxdWVzdCxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgc3luYzogZmFsc2UsXG4gICAgICB9LCByZXN1bHRzID0+IHRoaXMuX3Byb2Nlc3NSdW5SZXN1bHRzKHJlc3VsdHMsIG5ld1JlcXVlc3QsIHBhZ2VTaXplKSk7XG4gICAgfVxuICB9XG59XG5cbkFubm91bmNlbWVudHNRdWVyeS5fc3VwcG9ydGVkRXZlbnRzID0gW1xuXS5jb25jYXQoTWVzc2FnZXNRdWVyeS5fc3VwcG9ydGVkRXZlbnRzKTtcblxuXG5Bbm5vdW5jZW1lbnRzUXVlcnkuTWF4UGFnZVNpemUgPSAxMDA7XG5cbkFubm91bmNlbWVudHNRdWVyeS5wcm90b3R5cGUubW9kZWwgPSBRdWVyeS5Bbm5vdW5jZW1lbnQ7XG5cblJvb3QuaW5pdENsYXNzLmFwcGx5KEFubm91bmNlbWVudHNRdWVyeSwgW0Fubm91bmNlbWVudHNRdWVyeSwgJ0Fubm91bmNlbWVudHNRdWVyeSddKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbm5vdW5jZW1lbnRzUXVlcnk7XG4iXX0=
