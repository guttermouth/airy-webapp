'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Query class for running a Query on Identities
 *
 *      var identityQuery = client.createQuery({
 *        client: client,
 *        model: layer.Query.Identity
 *      });
 *
 *
 * You can change the `paginationWindow` property at any time using:
 *
 *      query.update({
 *        paginationWindow: 200
 *      });
 *
 * You can release data held in memory by your queries when done with them:
 *
 *      query.destroy();
 *
 * @class  layer.IdentitiesQuery
 * @extends layer.Query
 */
var Root = require('../root');
var Query = require('./query');

var IdentitiesQuery = function (_Query) {
  _inherits(IdentitiesQuery, _Query);

  function IdentitiesQuery() {
    _classCallCheck(this, IdentitiesQuery);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(IdentitiesQuery).apply(this, arguments));
  }

  _createClass(IdentitiesQuery, [{
    key: '_fetchData',
    value: function _fetchData(pageSize) {
      var _this2 = this;

      // There is not yet support for paging Identities;  as all identities are loaded,
      // if there is a _nextDBFromId, we no longer need to get any more from the database
      if (!this._nextDBFromId) {
        this.client.dbManager.loadIdentities(function (identities) {
          if (identities.length) _this2._appendResults({ data: identities }, true);
        });
      }

      var newRequest = 'identities?page_size=' + pageSize + (this._nextServerFromId ? '&from_id=' + this._nextServerFromId : '');

      // Don't repeat still firing queries
      if (newRequest !== this._firingRequest) {
        this.isFiring = true;
        this._firingRequest = newRequest;
        this.client.xhr({
          telemetry: {
            name: 'identity_query_time'
          },
          url: newRequest,
          method: 'GET',
          sync: false
        }, function (results) {
          return _this2._processRunResults(results, newRequest, pageSize);
        });
      }
    }
  }, {
    key: '_appendResultsSplice',
    value: function _appendResultsSplice(item) {
      this.data.push(this._getData(item));
    }
  }, {
    key: '_handleEvents',
    value: function _handleEvents(eventName, evt) {
      switch (eventName) {

        // If a Identity has changed and its in our result set, replace
        // it with a new immutable object
        case 'identities:change':
          this._handleChangeEvent('identities', evt);
          break;

        // If Identities are added, and they aren't already in our result set
        // add them.
        case 'identities:add':
          this._handleAddEvent('identities', evt);
          break;

        // If a Identity is deleted and its in our result set, remove it
        // and trigger an event
        case 'identities:remove':
          this._handleRemoveEvent('identities', evt);
          break;
      }
    }
  }]);

  return IdentitiesQuery;
}(Query);

IdentitiesQuery._supportedEvents = [].concat(Query._supportedEvents);

IdentitiesQuery.MaxPageSize = 500;

IdentitiesQuery.prototype.model = Query.Identity;

Root.initClass.apply(IdentitiesQuery, [IdentitiesQuery, 'IdentitiesQuery']);

module.exports = IdentitiesQuery;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyaWVzL2lkZW50aXRpZXMtcXVlcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBLElBQU0sT0FBTyxRQUFRLFNBQVIsQ0FBYjtBQUNBLElBQU0sUUFBUSxRQUFRLFNBQVIsQ0FBZDs7SUFFTSxlOzs7Ozs7Ozs7OzsrQkFDTyxRLEVBQVU7QUFBQTs7QUFDbkI7QUFDQTtBQUNBLFVBQUksQ0FBQyxLQUFLLGFBQVYsRUFBeUI7QUFDdkIsYUFBSyxNQUFMLENBQVksU0FBWixDQUFzQixjQUF0QixDQUFxQyxVQUFDLFVBQUQsRUFBZ0I7QUFDbkQsY0FBSSxXQUFXLE1BQWYsRUFBdUIsT0FBSyxjQUFMLENBQW9CLEVBQUUsTUFBTSxVQUFSLEVBQXBCLEVBQTBDLElBQTFDO0FBQ3hCLFNBRkQ7QUFHRDs7QUFFRCxVQUFNLGFBQWEsMEJBQXdCLFFBQXhCLElBQ2hCLEtBQUssaUJBQUwsR0FBeUIsY0FBYyxLQUFLLGlCQUE1QyxHQUFnRSxFQURoRCxDQUFuQjs7QUFHQTtBQUNBLFVBQUksZUFBZSxLQUFLLGNBQXhCLEVBQXdDO0FBQ3RDLGFBQUssUUFBTCxHQUFnQixJQUFoQjtBQUNBLGFBQUssY0FBTCxHQUFzQixVQUF0QjtBQUNBLGFBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0I7QUFDZCxxQkFBVztBQUNULGtCQUFNO0FBREcsV0FERztBQUlkLGVBQUssVUFKUztBQUtkLGtCQUFRLEtBTE07QUFNZCxnQkFBTTtBQU5RLFNBQWhCLEVBT0c7QUFBQSxpQkFBVyxPQUFLLGtCQUFMLENBQXdCLE9BQXhCLEVBQWlDLFVBQWpDLEVBQTZDLFFBQTdDLENBQVg7QUFBQSxTQVBIO0FBUUQ7QUFDRjs7O3lDQUVvQixJLEVBQU07QUFDekIsV0FBSyxJQUFMLENBQVUsSUFBVixDQUFlLEtBQUssUUFBTCxDQUFjLElBQWQsQ0FBZjtBQUNEOzs7a0NBR2EsUyxFQUFXLEcsRUFBSztBQUM1QixjQUFRLFNBQVI7O0FBRUU7QUFDQTtBQUNBLGFBQUssbUJBQUw7QUFDRSxlQUFLLGtCQUFMLENBQXdCLFlBQXhCLEVBQXNDLEdBQXRDO0FBQ0E7O0FBRUY7QUFDQTtBQUNBLGFBQUssZ0JBQUw7QUFDRSxlQUFLLGVBQUwsQ0FBcUIsWUFBckIsRUFBbUMsR0FBbkM7QUFDQTs7QUFFRjtBQUNBO0FBQ0EsYUFBSyxtQkFBTDtBQUNFLGVBQUssa0JBQUwsQ0FBd0IsWUFBeEIsRUFBc0MsR0FBdEM7QUFDQTtBQWxCSjtBQW9CRDs7OztFQXREMkIsSzs7QUF5RDlCLGdCQUFnQixnQkFBaEIsR0FBbUMsR0FFakMsTUFGaUMsQ0FFMUIsTUFBTSxnQkFGb0IsQ0FBbkM7O0FBS0EsZ0JBQWdCLFdBQWhCLEdBQThCLEdBQTlCOztBQUVBLGdCQUFnQixTQUFoQixDQUEwQixLQUExQixHQUFrQyxNQUFNLFFBQXhDOztBQUVBLEtBQUssU0FBTCxDQUFlLEtBQWYsQ0FBcUIsZUFBckIsRUFBc0MsQ0FBQyxlQUFELEVBQWtCLGlCQUFsQixDQUF0Qzs7QUFFQSxPQUFPLE9BQVAsR0FBaUIsZUFBakIiLCJmaWxlIjoiaWRlbnRpdGllcy1xdWVyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUXVlcnkgY2xhc3MgZm9yIHJ1bm5pbmcgYSBRdWVyeSBvbiBJZGVudGl0aWVzXG4gKlxuICogICAgICB2YXIgaWRlbnRpdHlRdWVyeSA9IGNsaWVudC5jcmVhdGVRdWVyeSh7XG4gKiAgICAgICAgY2xpZW50OiBjbGllbnQsXG4gKiAgICAgICAgbW9kZWw6IGxheWVyLlF1ZXJ5LklkZW50aXR5XG4gKiAgICAgIH0pO1xuICpcbiAqXG4gKiBZb3UgY2FuIGNoYW5nZSB0aGUgYHBhZ2luYXRpb25XaW5kb3dgIHByb3BlcnR5IGF0IGFueSB0aW1lIHVzaW5nOlxuICpcbiAqICAgICAgcXVlcnkudXBkYXRlKHtcbiAqICAgICAgICBwYWdpbmF0aW9uV2luZG93OiAyMDBcbiAqICAgICAgfSk7XG4gKlxuICogWW91IGNhbiByZWxlYXNlIGRhdGEgaGVsZCBpbiBtZW1vcnkgYnkgeW91ciBxdWVyaWVzIHdoZW4gZG9uZSB3aXRoIHRoZW06XG4gKlxuICogICAgICBxdWVyeS5kZXN0cm95KCk7XG4gKlxuICogQGNsYXNzICBsYXllci5JZGVudGl0aWVzUXVlcnlcbiAqIEBleHRlbmRzIGxheWVyLlF1ZXJ5XG4gKi9cbmNvbnN0IFJvb3QgPSByZXF1aXJlKCcuLi9yb290Jyk7XG5jb25zdCBRdWVyeSA9IHJlcXVpcmUoJy4vcXVlcnknKTtcblxuY2xhc3MgSWRlbnRpdGllc1F1ZXJ5IGV4dGVuZHMgUXVlcnkge1xuICBfZmV0Y2hEYXRhKHBhZ2VTaXplKSB7XG4gICAgLy8gVGhlcmUgaXMgbm90IHlldCBzdXBwb3J0IGZvciBwYWdpbmcgSWRlbnRpdGllczsgIGFzIGFsbCBpZGVudGl0aWVzIGFyZSBsb2FkZWQsXG4gICAgLy8gaWYgdGhlcmUgaXMgYSBfbmV4dERCRnJvbUlkLCB3ZSBubyBsb25nZXIgbmVlZCB0byBnZXQgYW55IG1vcmUgZnJvbSB0aGUgZGF0YWJhc2VcbiAgICBpZiAoIXRoaXMuX25leHREQkZyb21JZCkge1xuICAgICAgdGhpcy5jbGllbnQuZGJNYW5hZ2VyLmxvYWRJZGVudGl0aWVzKChpZGVudGl0aWVzKSA9PiB7XG4gICAgICAgIGlmIChpZGVudGl0aWVzLmxlbmd0aCkgdGhpcy5fYXBwZW5kUmVzdWx0cyh7IGRhdGE6IGlkZW50aXRpZXMgfSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdSZXF1ZXN0ID0gYGlkZW50aXRpZXM/cGFnZV9zaXplPSR7cGFnZVNpemV9YCArXG4gICAgICAodGhpcy5fbmV4dFNlcnZlckZyb21JZCA/ICcmZnJvbV9pZD0nICsgdGhpcy5fbmV4dFNlcnZlckZyb21JZCA6ICcnKTtcblxuICAgIC8vIERvbid0IHJlcGVhdCBzdGlsbCBmaXJpbmcgcXVlcmllc1xuICAgIGlmIChuZXdSZXF1ZXN0ICE9PSB0aGlzLl9maXJpbmdSZXF1ZXN0KSB7XG4gICAgICB0aGlzLmlzRmlyaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2ZpcmluZ1JlcXVlc3QgPSBuZXdSZXF1ZXN0O1xuICAgICAgdGhpcy5jbGllbnQueGhyKHtcbiAgICAgICAgdGVsZW1ldHJ5OiB7XG4gICAgICAgICAgbmFtZTogJ2lkZW50aXR5X3F1ZXJ5X3RpbWUnLFxuICAgICAgICB9LFxuICAgICAgICB1cmw6IG5ld1JlcXVlc3QsXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHN5bmM6IGZhbHNlLFxuICAgICAgfSwgcmVzdWx0cyA9PiB0aGlzLl9wcm9jZXNzUnVuUmVzdWx0cyhyZXN1bHRzLCBuZXdSZXF1ZXN0LCBwYWdlU2l6ZSkpO1xuICAgIH1cbiAgfVxuXG4gIF9hcHBlbmRSZXN1bHRzU3BsaWNlKGl0ZW0pIHtcbiAgICB0aGlzLmRhdGEucHVzaCh0aGlzLl9nZXREYXRhKGl0ZW0pKTtcbiAgfVxuXG5cbiAgX2hhbmRsZUV2ZW50cyhldmVudE5hbWUsIGV2dCkge1xuICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7XG5cbiAgICAgIC8vIElmIGEgSWRlbnRpdHkgaGFzIGNoYW5nZWQgYW5kIGl0cyBpbiBvdXIgcmVzdWx0IHNldCwgcmVwbGFjZVxuICAgICAgLy8gaXQgd2l0aCBhIG5ldyBpbW11dGFibGUgb2JqZWN0XG4gICAgICBjYXNlICdpZGVudGl0aWVzOmNoYW5nZSc6XG4gICAgICAgIHRoaXMuX2hhbmRsZUNoYW5nZUV2ZW50KCdpZGVudGl0aWVzJywgZXZ0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIElmIElkZW50aXRpZXMgYXJlIGFkZGVkLCBhbmQgdGhleSBhcmVuJ3QgYWxyZWFkeSBpbiBvdXIgcmVzdWx0IHNldFxuICAgICAgLy8gYWRkIHRoZW0uXG4gICAgICBjYXNlICdpZGVudGl0aWVzOmFkZCc6XG4gICAgICAgIHRoaXMuX2hhbmRsZUFkZEV2ZW50KCdpZGVudGl0aWVzJywgZXZ0KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIElmIGEgSWRlbnRpdHkgaXMgZGVsZXRlZCBhbmQgaXRzIGluIG91ciByZXN1bHQgc2V0LCByZW1vdmUgaXRcbiAgICAgIC8vIGFuZCB0cmlnZ2VyIGFuIGV2ZW50XG4gICAgICBjYXNlICdpZGVudGl0aWVzOnJlbW92ZSc6XG4gICAgICAgIHRoaXMuX2hhbmRsZVJlbW92ZUV2ZW50KCdpZGVudGl0aWVzJywgZXZ0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbklkZW50aXRpZXNRdWVyeS5fc3VwcG9ydGVkRXZlbnRzID0gW1xuXG5dLmNvbmNhdChRdWVyeS5fc3VwcG9ydGVkRXZlbnRzKTtcblxuXG5JZGVudGl0aWVzUXVlcnkuTWF4UGFnZVNpemUgPSA1MDA7XG5cbklkZW50aXRpZXNRdWVyeS5wcm90b3R5cGUubW9kZWwgPSBRdWVyeS5JZGVudGl0eTtcblxuUm9vdC5pbml0Q2xhc3MuYXBwbHkoSWRlbnRpdGllc1F1ZXJ5LCBbSWRlbnRpdGllc1F1ZXJ5LCAnSWRlbnRpdGllc1F1ZXJ5J10pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElkZW50aXRpZXNRdWVyeTtcbiJdfQ==
