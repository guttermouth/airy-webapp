'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @class layer.Logger
 * @private
 *
 */
var _require$LOG = require('./const').LOG;

var DEBUG = _require$LOG.DEBUG;
var INFO = _require$LOG.INFO;
var WARN = _require$LOG.WARN;
var ERROR = _require$LOG.ERROR;
var NONE = _require$LOG.NONE;

// Pretty arbitrary test that IE/edge fails and others don't.  Yes I could do a more direct
// test for IE/edge but its hoped that MS will fix this around the time they cleanup their internal console object.
// Note that uglifyjs with drop_console=true will throw an error on console.assert.toString().match; so we instead do (console.assert.toString() || "") which drop_console
// on replacing console.assert.toString() with (void 0) will still work

var supportsConsoleFormatting = Boolean(console.assert && (console.assert.toString() || "").match(/assert/));
var LayerCss = 'color: #888; font-weight: bold;';
var Black = 'color: black';
/* istanbulify ignore next */

var Logger = function () {
  function Logger() {
    _classCallCheck(this, Logger);
  }

  _createClass(Logger, [{
    key: 'log',
    value: function log(msg, obj, type, color) {
      /* istanbul ignore else */
      if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
        obj = msg;
        msg = '';
      }
      var timestamp = new Date().toLocaleTimeString();
      var op = void 0;
      switch (type) {
        case DEBUG:
          op = 'debug';
          break;
        case INFO:
          op = 'info';
          break;
        case WARN:
          op = 'warn';
          break;
        case ERROR:
          op = 'error';
          break;
        default:
          op = 'log';
      }
      if (obj) {
        if (supportsConsoleFormatting) {
          console[op]('%cLayer%c ' + op.toUpperCase() + '%c [' + timestamp + ']: ' + msg, LayerCss, 'color: ' + color, Black, obj);
        } else {
          console[op]('Layer ' + op.toUpperCase() + ' [' + timestamp + ']: ' + msg, obj);
        }
      } else if (supportsConsoleFormatting) {
        console[op]('%cLayer%c ' + op.toUpperCase() + '%c [' + timestamp + ']: ' + msg, LayerCss, 'color: ' + color, Black);
      } else {
        console[op]('Layer ' + op.toUpperCase() + ' [' + timestamp + ']: ' + msg);
      }
    }
  }, {
    key: 'debug',
    value: function debug(msg, obj) {
      /* istanbul ignore next */
      if (this.level >= DEBUG) this.log(msg, obj, DEBUG, '#888');
    }
  }, {
    key: 'info',
    value: function info(msg, obj) {
      /* istanbul ignore next */
      if (this.level >= INFO) this.log(msg, obj, INFO, 'black');
    }
  }, {
    key: 'warn',
    value: function warn(msg, obj) {
      /* istanbul ignore next */
      if (this.level >= WARN) this.log(msg, obj, WARN, 'orange');
    }
  }, {
    key: 'error',
    value: function error(msg, obj) {
      /* istanbul ignore next */
      if (this.level >= ERROR) this.log(msg, obj, ERROR, 'red');
    }
  }]);

  return Logger;
}();

/* istanbul ignore next */


Logger.prototype.level = typeof jasmine === 'undefined' ? ERROR : NONE;

var logger = new Logger();

module.exports = logger;
//# sourceMappingURL=data:application/json;base64,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RUEsSUFBTSxTQUFTLElBQUksTUFBSixFQUFmOztBQUVBLE9BQU8sT0FBUCxHQUFpQixNQUFqQiIsImZpbGUiOiJsb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBjbGFzcyBsYXllci5Mb2dnZXJcbiAqIEBwcml2YXRlXG4gKlxuICovXG5jb25zdCB7IERFQlVHLCBJTkZPLCBXQVJOLCBFUlJPUiwgTk9ORSB9ID0gcmVxdWlyZSgnLi9jb25zdCcpLkxPRztcblxuLy8gUHJldHR5IGFyYml0cmFyeSB0ZXN0IHRoYXQgSUUvZWRnZSBmYWlscyBhbmQgb3RoZXJzIGRvbid0LiAgWWVzIEkgY291bGQgZG8gYSBtb3JlIGRpcmVjdFxuLy8gdGVzdCBmb3IgSUUvZWRnZSBidXQgaXRzIGhvcGVkIHRoYXQgTVMgd2lsbCBmaXggdGhpcyBhcm91bmQgdGhlIHRpbWUgdGhleSBjbGVhbnVwIHRoZWlyIGludGVybmFsIGNvbnNvbGUgb2JqZWN0LlxuLy8gTm90ZSB0aGF0IHVnbGlmeWpzIHdpdGggZHJvcF9jb25zb2xlPXRydWUgd2lsbCB0aHJvdyBhbiBlcnJvciBvbiBjb25zb2xlLmFzc2VydC50b1N0cmluZygpLm1hdGNoOyBzbyB3ZSBpbnN0ZWFkIGRvIChjb25zb2xlLmFzc2VydC50b1N0cmluZygpIHx8IFwiXCIpIHdoaWNoIGRyb3BfY29uc29sZVxuLy8gb24gcmVwbGFjaW5nIGNvbnNvbGUuYXNzZXJ0LnRvU3RyaW5nKCkgd2l0aCAodm9pZCAwKSB3aWxsIHN0aWxsIHdvcmtcbmNvbnN0IHN1cHBvcnRzQ29uc29sZUZvcm1hdHRpbmcgPSBCb29sZWFuKGNvbnNvbGUuYXNzZXJ0ICYmIChjb25zb2xlLmFzc2VydC50b1N0cmluZygpIHx8IFwiXCIpLm1hdGNoKC9hc3NlcnQvKSk7XG5jb25zdCBMYXllckNzcyA9ICdjb2xvcjogIzg4ODsgZm9udC13ZWlnaHQ6IGJvbGQ7JztcbmNvbnN0IEJsYWNrID0gJ2NvbG9yOiBibGFjayc7XG4vKiBpc3RhbmJ1bGlmeSBpZ25vcmUgbmV4dCAqL1xuY2xhc3MgTG9nZ2VyIHtcbiAgbG9nKG1zZywgb2JqLCB0eXBlLCBjb2xvcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHR5cGVvZiBtc2cgPT09ICdvYmplY3QnKSB7XG4gICAgICBvYmogPSBtc2c7XG4gICAgICBtc2cgPSAnJztcbiAgICB9XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKTtcbiAgICBsZXQgb3A7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIERFQlVHOlxuICAgICAgICBvcCA9ICdkZWJ1Zyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBJTkZPOlxuICAgICAgICBvcCA9ICdpbmZvJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFdBUk46XG4gICAgICAgIG9wID0gJ3dhcm4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRVJST1I6XG4gICAgICAgIG9wID0gJ2Vycm9yJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvcCA9ICdsb2cnO1xuICAgIH1cbiAgICBpZiAob2JqKSB7XG4gICAgICBpZiAoc3VwcG9ydHNDb25zb2xlRm9ybWF0dGluZykge1xuICAgICAgICBjb25zb2xlW29wXShgJWNMYXllciVjICR7b3AudG9VcHBlckNhc2UoKX0lYyBbJHt0aW1lc3RhbXB9XTogJHttc2d9YCwgTGF5ZXJDc3MsIGBjb2xvcjogJHtjb2xvcn1gLCBCbGFjaywgb2JqKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGVbb3BdKGBMYXllciAke29wLnRvVXBwZXJDYXNlKCl9IFske3RpbWVzdGFtcH1dOiAke21zZ31gLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydHNDb25zb2xlRm9ybWF0dGluZykge1xuICAgICAgY29uc29sZVtvcF0oYCVjTGF5ZXIlYyAke29wLnRvVXBwZXJDYXNlKCl9JWMgWyR7dGltZXN0YW1wfV06ICR7bXNnfWAsIExheWVyQ3NzLCBgY29sb3I6ICR7Y29sb3J9YCwgQmxhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlW29wXShgTGF5ZXIgJHtvcC50b1VwcGVyQ2FzZSgpfSBbJHt0aW1lc3RhbXB9XTogJHttc2d9YCk7XG4gICAgfVxuICB9XG5cblxuICBkZWJ1Zyhtc2csIG9iaikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHRoaXMubGV2ZWwgPj0gREVCVUcpIHRoaXMubG9nKG1zZywgb2JqLCBERUJVRywgJyM4ODgnKTtcbiAgfVxuXG4gIGluZm8obXNnLCBvYmopIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLmxldmVsID49IElORk8pIHRoaXMubG9nKG1zZywgb2JqLCBJTkZPLCAnYmxhY2snKTtcbiAgfVxuXG4gIHdhcm4obXNnLCBvYmopIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0aGlzLmxldmVsID49IFdBUk4pIHRoaXMubG9nKG1zZywgb2JqLCBXQVJOLCAnb3JhbmdlJyk7XG4gIH1cblxuICBlcnJvcihtc2csIG9iaikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHRoaXMubGV2ZWwgPj0gRVJST1IpIHRoaXMubG9nKG1zZywgb2JqLCBFUlJPUiwgJ3JlZCcpO1xuICB9XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5Mb2dnZXIucHJvdG90eXBlLmxldmVsID0gdHlwZW9mIGphc21pbmUgPT09ICd1bmRlZmluZWQnID8gRVJST1IgOiBOT05FO1xuXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nZ2VyO1xuIl19
