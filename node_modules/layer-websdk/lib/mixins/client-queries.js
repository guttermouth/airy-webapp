'use strict';

/**
 *
 * Adds Query handling to the layer.Client.
 *
 * @class layer.mixins.ClientQueries
 */

var Query = require('../queries/query');
var IdentitiesQuery = require('../queries/identities-query');
var ConversationsQuery = require('../queries/conversations-query');
var ChannelsQuery = require('../queries/channels-query');
var MembersQuery = require('../queries/members-query');
var MessagesQuery = require('../queries/messages-query');
var AnnouncementsQuery = require('../queries/announcements-query');
var ErrorDictionary = require('../layer-error').dictionary;

module.exports = {
  events: [],
  lifecycle: {
    constructor: function constructor(options) {
      this._models.queries = {};
    },
    cleanup: function cleanup() {
      var _this = this;

      Object.keys(this._models.queries).forEach(function (id) {
        var query = _this._models.queries[id];
        if (query && !query.isDestroyed) {
          query.destroy();
        }
      });
      this._models.queries = null;
    },
    reset: function reset() {
      this._models.queries = {};
    }
  },
  methods: {
    /**
     * Retrieve the query by query id.
     *
     * Useful for finding a Query when you only have the ID
     *
     * @method getQuery
     * @param  {string} id              - layer:///queries/uuid
     * @return {layer.Query}
     */
    getQuery: function getQuery(id) {
      if (typeof id !== 'string') throw new Error(ErrorDictionary.idParamRequired);
      return this._models.queries[id] || null;
    },


    /**
     * There are two options to create a new layer.Query instance.
     *
     * The direct way:
     *
     *     var query = client.createQuery({
     *         model: layer.Query.Message,
     *         predicate: 'conversation.id = '' + conv.id + ''',
     *         paginationWindow: 50
     *     });
     *
     * A Builder approach that allows for a simpler syntax:
     *
     *     var qBuilder = QueryBuilder
     *      .messages()
     *      .forConversation('layer:///conversations/ffffffff-ffff-ffff-ffff-ffffffffffff')
     *      .paginationWindow(100);
     *     var query = client.createQuery(qBuilder);
     *
     * @method createQuery
     * @param  {layer.QueryBuilder|Object} options - Either a layer.QueryBuilder instance, or parameters for the layer.Query constructor
     * @return {layer.Query}
     */
    createQuery: function createQuery(options) {
      var query = void 0;

      if (typeof options.build === 'function') {
        options = options.build();
      }
      options.client = this;
      switch (options.model) {
        case Query.Identity:
          query = new IdentitiesQuery(options);
          break;
        case Query.Conversation:
          query = new ConversationsQuery(options);
          break;
        case Query.Channel:
          query = new ChannelsQuery(options);
          break;
        case Query.Membership:
          query = new MembersQuery(options);
          break;
        case Query.Message:
          query = new MessagesQuery(options);
          break;
        case Query.Announcement:
          query = new AnnouncementsQuery(options);
          break;

        default:
          query = new Query(options);
      }
      this._addQuery(query);
      return query;
    },


    /**
     * Register the layer.Query.
     *
     * @method _addQuery
     * @private
     * @param  {layer.Query} query
     */
    _addQuery: function _addQuery(query) {
      this._models.queries[query.id] = query;
    },


    /**
     * Deregister the layer.Query.
     *
     * @method _removeQuery
     * @private
     * @param  {layer.Query} query [description]
     */
    _removeQuery: function _removeQuery(query) {
      var _this2 = this;

      if (query) {
        delete this._models.queries[query.id];
        if (!this._inCleanup) {
          var data = query.data.map(function (obj) {
            return _this2.getObject(obj.id);
          }).filter(function (obj) {
            return obj;
          });
          this._checkAndPurgeCache(data);
        }
        this.off(null, null, query);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
