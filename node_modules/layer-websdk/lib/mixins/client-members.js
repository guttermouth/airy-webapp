'use strict';

/**
 * Adds Channel Membership handling to the layer.Client.
 *
 * @class layer.mixins.ClientMembership
 */

var Syncable = require('../models/syncable');
var Membership = require('../models/membership');
var ErrorDictionary = require('../layer-error').dictionary;

module.exports = {
  events: [
  /**
   * A call to layer.Membership.load has completed successfully
   *
   * @event
   * @param {layer.LayerEvent} evt
   * @param {layer.Membership} evt.target
   */
  'members:loaded',

  /**
   * An Identity has had a change in its properties.
   *
   * Changes occur when new data arrives from the server.
   *
   *      client.on('members:change', function(evt) {
   *          var displayNameChanges = evt.getChangesFor('displayName');
   *          if (displayNameChanges.length) {
   *              myView.renderStatus(evt.target);
   *          }
   *      });
   *
   * @event
   * @param {layer.LayerEvent} evt
   * @param {layer.Membership} evt.target
   * @param {Object[]} evt.changes
   * @param {Mixed} evt.changes.newValue
   * @param {Mixed} evt.changes.oldValue
   * @param {string} evt.changes.property - Name of the property that has changed
   */
  'members:change',

  /**
   * A new Member has been added to the Client.
   *
   * This event is triggered whenever a new layer.Membership
   * has been received by the Client.
   *
          client.on('members:add', function(evt) {
              evt.membership.forEach(function(member) {
                  myView.addMember(member);
              });
          });
  *
  * @event
  * @param {layer.LayerEvent} evt
  * @param {layer.Membership[]} evt.membership
  */
  'members:add',

  /**
   * A Member has been removed from the Client.
   *
   * This does not typically occur.
   *
          client.on('members:remove', function(evt) {
              evt.membership.forEach(function(member) {
                  myView.addMember(member);
              });
          });
  *
  * @event
  * @param {layer.LayerEvent} evt
  * @param {layer.Membership[]} evt.membership
  */
  'members:remove'],
  lifecycle: {
    constructor: function constructor(options) {
      this._models.members = {};
    },
    cleanup: function cleanup() {
      var _this = this;

      Object.keys(this._models.members).forEach(function (id) {
        var member = _this._models.members[id];
        if (member && !member.isDestroyed) {
          member.destroy();
        }
      });
      this._models.members = null;
    },
    reset: function reset() {
      this._models.members = {};
    }
  },
  methods: {
    /**
     * Retrieve the membership info by ID.
     *
     * Not for use in typical apps.
     *
     * @method getMember
     * @param  {string} id               - layer:///channels/uuid/members/user_id
     * @param  {boolean} [canLoad=false] - Pass true to allow loading a member from the server if not found
     * @return {layer.Membership}
     */
    getMember: function getMember(id, canLoad) {
      if (typeof id !== 'string') throw new Error(ErrorDictionary.idParamRequired);

      if (this._models.members[id]) {
        return this._models.members[id];
      } else if (canLoad) {
        return Syncable.load(id, this);
      }
      return null;
    },


    /**
     * Report that a new Membership has been added.
     *
     * @method _addMembership
     * @protected
     * @param  {layer.Membership} member
     *
     */
    _addMembership: function _addMembership(member) {
      if (!this._models.members[member.id]) {
        this._models.members[member.id] = member;
        this._triggerAsync('members:add', { members: [member] });
        this._scheduleCheckAndPurgeCache(member);
      }
    },


    /**
     * Report that a member has been removed from the client.
     *
     * @method _removeMembership
     * @protected
     * @param  {layer.Membership} member
     */
    _removeMembership: function _removeMembership(member) {
      var id = typeof member === 'string' ? member : member.id;
      member = this._models.members[id];
      if (member) {
        delete this._models.members[id];
        if (!this._inCleanup) {
          member.off(null, null, this);
          this._triggerAsync('members:remove', { members: [member] });
        }
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
