/**
 * The Layer Emoji TextHandler replaces all :smile: and :-) with emoji images
 *
 * @class layerUI.handlers.text.Emoji
 */
'use strict';

var _twemoji = require('twemoji');

var _twemoji2 = _interopRequireDefault(_twemoji);

var _setEmoji = require('remarkable-emoji/setEmoji');

var _setEmoji2 = _interopRequireDefault(_setEmoji);

var _base = require('../../base');

var _base2 = _interopRequireDefault(_base);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_base2.default.registerTextHandler({
  base: location.protocol + '://twemoji.maxcdn.com/',
  name: 'emoji',
  order: 300,
  requiresEnable: true,
  handler: function handler(textData) {
    // Bug in RemarkableParser requires extra spacing around html tags to keep them away from the emoticon.
    var text = textData.text.replace(/<br\/>/g, ' <br/> ');

    // Parse it
    var parsed = (0, _setEmoji2.default)(text);

    // See if its an all-emoji line by replacing all emojis with empty strings
    // and seeing if there's anything left when we're done.
    var allEmojiLine = !_twemoji2.default.replace(parsed, function () {
      return '';
    }).match(/\S/);

    // Render the emoji images
    text = _twemoji2.default.parse((0, _setEmoji2.default)(text), {
      size: allEmojiLine ? '36x36' : '16x16',
      className: allEmojiLine ? 'emoji emoji-line' : 'emoji'
    });

    // Undo the extra spacing we added above
    text = text.replace(/ <br\/> /g, '<br/>');
    textData.text = text;
  }
}); 