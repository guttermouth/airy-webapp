/**
 * The Layer User List renders a pagable list of layer.Identity objects, and allows the user to select people to talk with.
 *
 * This is typically used for creating/updating Conversation participant lists.
 *
 * This Component can be added to your project directly in the HTML file:
 *
 * ```
 * <layer-identities-list></layer-identities-list>
 * ```
 *
 * Or via DOM Manipulation:
 *
 * ```javascript
 * var identitylist = document.createElement('layer-identities-list');
 * ```
 *
 * And then its properties can be set as:
 *
 * ```javascript
 * var identityList = document.querySelector('layer-identities-list');
 * identityList.selectedIdentities = [identity3, identity6];
 * identityList.onIdentitySelected = identityList.onIdentityDeselected = function(evt) {
 *    log("The new selected users are: ", identityList.selectedIdentities);
 * }
 * ```
 *
 * ## Events
 *
 * Events listed here come from either this component, or its subcomponents.
 *
 * * {@link layerUI.components.IdentitiesListPanel.List#layer-identity-deselected layer-identity-deselected}: User has clicked to unselect an Identity
 * * {@link layerUI.components.IdentitiesListPanel.List#layer-identity-selected layer-identity-selected}: User has clicked to select an Identity
 *
 * @class layerUI.components.IdentitiesListPanel.List
 * @extends layerUI.components.Component
 * @mixin layerUI.mixins.List
 * @mixin layerUI.mixins.MainComponent
 * @mixin layerUI.mixins.ListLoadIndicator
 */
'use strict';

var _layerWebsdk = require('layer-websdk');

var _layerWebsdk2 = _interopRequireDefault(_layerWebsdk);

var _component = require('../../../components/component');

var _list = require('../../../mixins/list');

var _list2 = _interopRequireDefault(_list);

var _mainComponent = require('../../../mixins/main-component');

var _mainComponent2 = _interopRequireDefault(_mainComponent);

var _hasQuery = require('../../../mixins/has-query');

var _hasQuery2 = _interopRequireDefault(_hasQuery);

var _listLoadIndicator = require('../../../mixins/list-load-indicator');

var _listLoadIndicator2 = _interopRequireDefault(_listLoadIndicator);

require('../layer-identity-item/layer-identity-item');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _component.registerComponent)('layer-identities-list', {
  mixins: [_list2.default, _mainComponent2.default, _hasQuery2.default, _listLoadIndicator2.default],

  /**
   * The user has clicked to select an Identity in the Identities List.
   *
   * ```javascript
   *    identityList.onIdentitySelected = function(evt) {
   *      var identityAdded = evt.detail.item;
   *      var selectedIdentities = evt.target.selectedIdentities;
   *
   *      // To prevent the UI from proceding to add the identity to the selectedIdentities:
   *      // Note that identityAdded is not yet in selectedIdentities so that you may prevent it from being added.
   *      evt.preventDefault();
   *    };
   * ```
   *
   *  OR
   *
   * ```javascript
   *    document.body.addEventListener('layer-identity-selected', function(evt) {
   *      var identityAdded = evt.detail.item;
   *      var selectedIdentities = evt.target.selectedIdentities;
   *
   *      // To prevent the UI from proceding to add the identity to the selectedIdentities:
   *      // Note that identityAdded is not yet in selectedIdentities so that you may prevent it from being added.
   *      evt.preventDefault();
   *    });
   * ```
   *
   * @event layer-identity-selected
   * @param {Event} evt
   * @param {Object} evt.detail
   * @param {layer.Identity} evt.detail.item
   */
  /**
   * A identity selection change has occurred
   *
   * See the {@link layerUI.components.IdentitiesListPanel.List#layer-identity-selected layer-identity-selected} event for more detail.
   *
   * @property {Function} onIdentitySelected
   * @param {Event} evt
   * @param {Object} evt.detail
   * @param {layer.Identity} evt.detail.item
   */

  /**
   * The user has clicked to deselect a identity in the identities list.
   *
   *    identityList.onIdentityDeselected = function(evt) {
   *      var identityRemoved = evt.detail.item;
   *      var selectedIdentities = evt.target.selectedIdentities;
   *
   *      // To prevent the UI from proceding to add the identity to the selectedIdentities:
   *      // Note that identityRemoved is still in selectedIdentities so that you may prevent it from being removed.
   *      evt.preventDefault();
   *    };
   *
   *  OR
   *
   *    document.body.addEventListener('layer-identity-deselected', function(evt) {
   *      var identityRemoved = evt.detail.item;
   *      var selectedIdentities = evt.target.selectedIdentities;
   *
   *      // To prevent the UI from proceding to add the identity to the selectedIdentities:
   *      // Note that identityRemoved is still in selectedIdentities so that you may prevent it from being removed.
   *      evt.preventDefault();
   *    });
   *
   * @event layer-identity-deselected
   * @param {Event} evt
   * @param {Object} evt.detail
   * @param {layer.Identity} evt.detail.item
   */
  /**
   * A identity selection change has occurred
   *
   * See the {@link layerUI.components.IdentitiesListPanel.List#layer-identity-deselected layer-identity-deselected} event for more detail.
   *
   * @property {Function} onIdentityDeselected
   * @param {Event} evt
   * @param {Object} evt.detail
   * @param {layer.Identity} evt.detail.item
   */

  events: ['layer-identity-selected', 'layer-identity-deselected'],
  properties: {

    /**
     * Array of layer.Identity objects representing the identities who should be rendered as Selected.
     *
     * This property can be used both get and set the selected identities; however, if setting you should not be manipulating
     * the existing array, but rather setting a new array:
     *
     * Do NOT do this:
     *
     * ```javascript
     * list.selectedIdentities.push(identity1); // DO NOT DO THIS
     * ```
     *
     * Instead, Please do this:
     *
     * ```javascript
     * var newList = list.selectedIdentities.concat([]);
     * newList.push(identity1);
     * list.selectedIdentities = newList;
     * ```
     *
     * You can clear the list with
     *
     * ```javascript
     * list.selectedIdentities = [];
     * ```
     *
     * @property {layer.Identity[]} [selectedIdentities=[]]
     */
    selectedIdentities: {
      set: function set(value) {
        var _this = this;

        if (!value) value = [];
        if (!Array.isArray(value)) return;
        if (!value) value = [];
        this.properties.selectedIdentities = value.map(function (identity) {
          if (!(identity instanceof _layerWebsdk2.default.Identity)) return _this.properties.client.getIdentity(identity.id);
          return identity;
        });
        this._renderSelection();
      }
    },

    /**
     * The model to generate a Query for if a Query is not provided.
     *
     * @readonly
     * @private
     * @property {String} [_queryModel=layer.Query.Identity]
     */
    _queryModel: {
      value: _layerWebsdk2.default.Query.Identity
    }
  },
  methods: {

    /**
     * Constructor.
     *
     * @method onCreate
     * @private
     */
    onCreate: function onCreate() {
      if (!this.id) this.id = _layerWebsdk2.default.Util.generateUUID();
      this.properties.selectedIdentities = [];

      this.addEventListener('layer-identity-item-selected', this._handleIdentitySelect.bind(this));
      this.addEventListener('layer-identity-item-deselected', this._handleIdentityDeselect.bind(this));
    },


    /**
     * Handle a user Selection event triggered by a layerUI.components.IdentitiesListPanel.Item.
     *
     * Adds the Identity to the selectedIdentities array.
     *
     * @method _handleIdentitySelect
     * @private
     * @param {Event} evt
     */
    _handleIdentitySelect: function _handleIdentitySelect(evt) {
      evt.stopPropagation();
      var identity = evt.detail.item;
      var index = this.selectedIdentities.indexOf(identity);

      // If the item is not in our selectedIdentities array, add it
      if (index === -1) {
        // If app calls prevent default, then don't add the identity to our selectedIdentities list, just call preventDefault on the original event.
        if (this.trigger('layer-identity-selected', { item: identity })) {
          this.selectedIdentities.push(identity);
        } else {
          evt.preventDefault();
        }
      }
    },


    /**
     * Handle a user Deselection event triggered by a layerUI.components.IdentitiesListPanel.Item
     *
     * Removes the identity from the selectedIdentities array.
     *
     * @method _handleIdentityDeselect
     * @private
     * @param {Event} evt
     */
    _handleIdentityDeselect: function _handleIdentityDeselect(evt) {
      evt.stopPropagation();
      var identity = evt.detail.item;
      var index = this.selectedIdentities.indexOf(identity);

      // If the item is in our selectedIdentities array, remove it
      if (index !== -1) {
        // If app calls prevent default, then don't remove the identity, just call preventDefault on the original event.
        if (this.trigger('layer-identity-deselected', { item: identity })) {
          this.selectedIdentities.splice(index, 1);
        } else {
          evt.preventDefault();
        }
      }
    },


    /**
     * Append a layerUI.components.IdentitiesListPanel.Item to the Document Fragment
     *
     * @method _generateItem
     * @param {layer.Identity} identity
     * @private
     */
    _generateItem: function _generateItem(identity) {
      var identityWidget = document.createElement('layer-identity-item');
      identityWidget.item = identity;
      identityWidget.id = this._getItemId(identity.id);
      identityWidget.selected = this.selectedIdentities.indexOf(identity) !== -1;
      identityWidget._runFilter(this.filter);
      return identityWidget;
    },


    /**
     * Call this on any Query change events.
     *
     * This updates the selectedIdentities after doing standard query update
     *
     * @method onRerender
     * @private
     * @param {Event} evt
     */
    onRerender: function onRerender() {
      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      switch (evt.type) {
        // If its a remove event, find the user and remove its widget.
        case 'remove':
          {
            var removalIndex = this.selectedIdentities.indexOf(evt.target);
            if (removalIndex !== -1) this.selectedIdentities.splice(removalIndex, 1);
            break;
          }

        // If its a reset event, all data is gone, rerender everything.
        case 'reset':
          this.selectedIdentities = [];
          break;
      }
    },


    /**
     * Update the selected property of all Identity Items based on the selectedIdentities property.
     *
     * @method _renderSelection
     * @private
     */
    _renderSelection: function _renderSelection() {
      var _this2 = this;

      var selectedNodes = this.querySelectorAllArray('.layer-identity-item-selected').map(function (node) {
        return node.parentNode;
      });
      var selectedIds = this.selectedIdentities.map(function (identity) {
        return '#' + _this2._getItemId(identity.id);
      });
      var nodesToSelect = this.selectedIdentities.length ? this.querySelectorAllArray(selectedIds.join(', ')) : [];
      selectedNodes.forEach(function (node) {
        if (nodesToSelect.indexOf(node) === -1) node.selected = false;
      });
      nodesToSelect.forEach(function (node) {
        if (selectedNodes.indexOf(node) === -1) node.selected = true;
      });
    }
  }
}); 


(function () {
  var layerUI = require('../../../base');
  layerUI.buildAndRegisterTemplate("layer-identities-list", "<div class='layer-load-indicator' layer-id='loadIndicator'>Loading users...</div>", "");
  layerUI.buildStyle("layer-identities-list", "layer-identities-list {\noverflow-y: auto;\ndisplay: block;\n}\nlayer-identities-list .layer-load-indicator {\ntext-align: center;\nborder-top: solid 1px #ccc;\nfont-style: italic;\ndisplay: none;\n}\nlayer-identities-list.layer-loading-data .layer-load-indicator {\ndisplay: block;\n}", "");
})();