'use strict';

require('webcomponents.js/webcomponents-lite');

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _component = require('./components/component');

require('./handlers/message/layer-message-unknown');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Import this if you want just a basic setup without any built-in widgets.
 *
 * Import index.js instead of you want a standard setup with standard widgets installed.
 */
'use strict';

require('webcomponents.js/webcomponents-lite');

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _component = require('./components/component');

require('./handlers/message/layer-message-unknown');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Import this if you want just a basic setup without any built-in widgets.
 *
 * Import index.js instead of you want a standard setup with standard widgets installed.
 */

_base2.default.registerComponent = _component.registerComponent;
_base2.default.registerMessageComponent = _component.registerMessageComponent;

/**
 * Unregister a component.  Must be called before layerUI.init().
 *
 * Use this call to prevent a component from being registered with the document.
 * Currently this works only on components that have been already called with `layerUI.registerComponent`
 * but which have not yet been completed via a call to `layerUI.init()`.
 *
 * This is not typically needed, but allows you to defer creation of a widget, and then at some point later in your application lifecycle
 * define a replacement for that widget. You can not redefine an html tag that is registered with the document... but this prevents it from
 * being registered yet.
 */
_base2.default.unregisterComponent = _component.unregisterComponent;

_base2.default.init = function init() {
  var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  Object.keys(settings).forEach(function (name) {
    _base2.default.settings[name] = settings[name];
  });

  if (!_base2.default.settings.mixins) _base2.default.settings.mixins = [];

  // Register all widgets
  (0, _component.registerAll)();

  // Enable the text handlers
  _base2.default.settings.textHandlers.forEach(function (handlerName) {
    _base2.default.registerTextHandler({ name: handlerName });
  });
};

module.exports = _base2.default;

_base2.default.registerComponent = _component.registerComponent;
_base2.default.registerMessageComponent = _component.registerMessageComponent;

/**
 * Unregister a component.  Must be called before layerUI.init().
 *
 * Use this call to prevent a component from being registered with the document.
 * Currently this works only on components that have been already called with `layerUI.registerComponent`
 * but which have not yet been completed via a call to `layerUI.init()`.
 *
 * This is not typically needed, but allows you to defer creation of a widget, and then at some point later in your application lifecycle
 * define a replacement for that widget. You can not redefine an html tag that is registered with the document... but this prevents it from
 * being registered yet.
 */
_base2.default.unregisterComponent = _component.unregisterComponent;

_base2.default.init = function init() {
  var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  Object.keys(settings).forEach(function (name) {
    _base2.default.settings[name] = settings[name];
  });

  if (!_base2.default.settings.mixins) _base2.default.settings.mixins = [];

  // Register all widgets
  (0, _component.registerAll)();

  // Enable the text handlers
  _base2.default.settings.textHandlers.forEach(function (handlerName) {
    _base2.default.registerTextHandler({ name: handlerName });
  });
};

module.exports = _base2.default;